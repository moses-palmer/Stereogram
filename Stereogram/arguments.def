/**
 * Everything within this section will be defined at the top of main.c.
 */
#ifndef ARGUMENTS_HELPERS
#define ARGUMENTS_HELPERS

#define ARGUMENTS_HELP \
"This program creates auto-stereograms by combining a depth buffer and a " \
"pattern image."

#include <stdio.h>

#include <effect.h>
#include <stereo.h>

/* The strength values for the different effects */
#define WAVE_STRENGTH_BASE 5.0
#define WAVE_STRENGTH_EXTRA 8.0
#define LUMINANCE_STRENGTH_BASE 2.0
#define LUMINANCE_STRENGTH_EXTRA 4.0

/**
 * Randomises a list of waves.
 *
 * The value of a wave will be a value uniformly chosen from (b, b + d) divided
 * by its index in the list.
 *
 * @param waves
 *     A pointer to the wave with index = 1.
 * @param count
 *     The number of waves in the list.
 * @param b, d
 *     The base and distance parameters.
 */
static void
waves_randomize(double waves[], unsigned int count, double b, double d)
{
    unsigned int i;

    for (i = 0; i < count; i++) {
        waves[i] = b + d * (double)(rand() - RAND_MAX / 2) / RAND_MAX / (i + 1);
    }
}

/**
 * This is the end of the top of main.c.
 *
 * Nothing but argument definitions may follow.
 */
#endif

_A(FILE*, in_file, "-i",
    1,
    ARGUMENT_IS_OPTIONAL,
    "<z-buffer file>\n"
    "The z-buffer file. This has to be a PNG file. By default, stdin is used.",

    /* Reopen stdin as a binary stream */
    *target = freopen(NULL, "rb", stdin);
    is_valid = *target != NULL;

    ,

    /* Simply open the file in binary mode */
    *target = fopen(value_strings[0], "rb");
    is_valid = *target != NULL;

    ,

    fclose(*target);
)

_A(FILE*, out_file, "-o",
    1,
    ARGUMENT_IS_OPTIONAL,
    "<output file>\n"
    "The output file. The stereogram will be written to this file as a PNG. "
    "By default, stdout is used.",

    /* Reopen stdout as a binary stream */
    *target = freopen(NULL, "wb", stdout);
    is_valid = *target != NULL;

    ,

    /* Simply open the file in binary mode */
    *target = fopen(value_strings[0], "wb");
    is_valid = *target != NULL;

    ,

    fclose(*target);
)

_A(struct {int width; int height;}, pattern_size, "-d",
    2,
    ARGUMENT_IS_PRESENT(pattern) ? ARGUMENT_IS_OPTIONAL : ARGUMENT_IS_REQUIRED,
    "<width> <height>\n"
    "The dimensions of the automatically generated pattern. This is required "
    "if no pattern image is specified.",

    /* There is no default value */

    ,

    target->width = atoi(value_strings[0]);
    target->height = atoi(value_strings[1]);

    /* If the pattern argument has been passed, this argument is not allowed */
    is_valid = !ARGUMENT_IS_PRESENT(pattern)
        && target->width > 0
        && target->height > 0;

    ,
)

_A(StereoPattern*, pattern, "-p",
    1,
    ARGUMENT_IS_OPTIONAL,
    "<pattern file>\n"
    "The pattern file. This has to be a PNG file. By default, a pattern image "
    "is generated.",

    double luminance_strengths[5];
    double wave_strengths[2 * 4];
    StereoPattern *pattern_base;

    pattern_base = stereo_pattern_create(
        ARGUMENT_VALUE(pattern_size).width,
        ARGUMENT_VALUE(pattern_size).height);

    /* Randomise every channel by itself and then apply a luminance effect */
    waves_randomize(wave_strengths,
        sizeof(wave_strengths) / sizeof(double),
        WAVE_STRENGTH_BASE, WAVE_STRENGTH_EXTRA);
    waves_randomize(luminance_strengths,
        sizeof(luminance_strengths) / sizeof(double),
        LUMINANCE_STRENGTH_BASE, LUMINANCE_STRENGTH_EXTRA);
    stereo_pattern_effect_run(pattern_base, luminance,
        sizeof(luminance_strengths) / sizeof(double), luminance_strengths,
        PP_RED);

    waves_randomize(wave_strengths,
        sizeof(wave_strengths) / sizeof(double),
        WAVE_STRENGTH_BASE, WAVE_STRENGTH_EXTRA);
    waves_randomize(luminance_strengths,
        sizeof(luminance_strengths) / sizeof(double),
        LUMINANCE_STRENGTH_BASE, LUMINANCE_STRENGTH_EXTRA);
    stereo_pattern_effect_run(pattern_base, luminance,
        sizeof(luminance_strengths) / sizeof(double), luminance_strengths,
        PP_GREEN);

    waves_randomize(wave_strengths,
        sizeof(wave_strengths) / sizeof(double),
        WAVE_STRENGTH_BASE, WAVE_STRENGTH_EXTRA);
    waves_randomize(luminance_strengths,
        sizeof(luminance_strengths) / sizeof(double),
        LUMINANCE_STRENGTH_BASE, LUMINANCE_STRENGTH_EXTRA);
    stereo_pattern_effect_run(pattern_base, luminance,
        sizeof(luminance_strengths) / sizeof(double), luminance_strengths,
        PP_BLUE);

    /* Randomise the waves again and apply a wave effect; store the result in
       the target */
    waves_randomize(wave_strengths,
        sizeof(wave_strengths) / sizeof(double),
        WAVE_STRENGTH_BASE, WAVE_STRENGTH_EXTRA);
    *target = stereo_pattern_create(
        ARGUMENT_VALUE(pattern_size).width,
        ARGUMENT_VALUE(pattern_size).height);
    stereo_pattern_effect_run(*target, wave,
        sizeof(wave_strengths) / sizeof(double) / 2, wave_strengths,
        pattern_base);
    stereo_pattern_free(pattern_base);

    ,

    *target = stereo_pattern_create_from_png_file(value_strings[0]);
    is_valid = *target != NULL;

    ,

    stereo_pattern_free(*target);
)

_A(double, strength, "-s",
    1,
    ARGUMENT_IS_OPTIONAL,
    "<strength>\n"
    "The strength with which to apply the stereogram effect.",

    *target = 6.0;

    ,

    if (sscanf(value_strings[0], "%lf", target) != 1) {
        is_valid = 0;
    }

    ,
)

_A(int, invert_depth, "-i",
    0,
    ARGUMENT_IS_OPTIONAL,
    "Whether to invert the depth channel.",

    *target = 0;

    ,

    *target = 1;

    ,
)

_A(int, channel, "-c",
    1,
    ARGUMENT_IS_OPTIONAL,
    "<channel>\n"
    "The colour channel (r, g, b, a or l) to use as depth channel. If not "
    "specified, l (the luminance) is used.\n"
    "\n"
    "The luminance is calculated by summing all colour channels and dividing "
    "by 3.",

    *target = -1;

    ,

    if (*value_strings[0] == 'r') {
        *target = 0;
    }
    else if (*value_strings[0] == 'g') {
        *target = 1;
    }
    else if (*value_strings[0] == 'b') {
        *target = 2;
    }
    else if (*value_strings[0] == 'a') {
        *target = 3;
    }
    else if (*value_strings[0] == 'l') {
        *target = -1;
    }
    else {
        is_valid = 0;
    }

    ,
)
